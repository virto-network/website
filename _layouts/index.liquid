<!DOCTYPE html>
<html lang={{ site.data.lang }}>
<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<meta name="description" content="{{ site.description }}">
	<title>{{ page.title }}</title>

	<meta name="theme-color" content="#10352B">
	<link rel="stylesheet" href="/css/index.css">
	<link rel="stylesheet" href="/css/layout.css">
	<link rel="stylesheet" href="/css/variables.css">
	<script defer data-domain="virto.network" src="https://plausible.io/js/script.js"></script>
</head>

<body class="hidden">
	{% include "nav.liquid" %}
	<dialog data-modal class="light-green-bg">
        <span class="close-button boldest">X</span>
        <div id="modal-message" class="center"></div>
        <template data-msg="success">
            <img src="/img/success.svg" alt="success" />
            <h2>{{ site.data[site.data.lang].modal.success.title }}</h2>
            <h3>{{ site.data[site.data.lang].modal.success.message }}</h3>
        </template>
        <template data-msg="error">
            <img src="/img/error.svg" alt="error" />
            <h2>{{ site.data[site.data.lang].modal.error.title }}</h2>
            <h3>{{ site.data[site.data.lang].modal.error.message }}</h3>
            <h3 class="bolder">{{ site.data[site.data.lang].modal.error.retry }}</h3>
        </template>
	</dialog>
		<main>{{ page.content }}</main>
		<a href="#footer" class="scroll-down-link white-text center-arrow"> {{ site.data[site.data.lang].globals.go-down }}
			<figure class="link-arrow">
				{% include "down.svg" %}
			</figure>
	 	</a>
	{% include "footer.liquid" %}

{% assign env = site.data.env %}

<script>
	const observer = new IntersectionObserver(entries => {
  		entries.forEach(entry => {
			if (entry.intersectionRatio > 0) {
				entry.target.classList.add('animate');
				observer.unobserve(entry.target);
			}
  		});
	}, { threshold: 0.2 }); 

	const animatedElements = document.querySelectorAll('.animated');

	animatedElements.forEach(element => {
		observer.observe(element);
	});

	document.fonts.ready.then(() => {
		document.body.classList.remove('hidden');
	});

// Airtable Connection
	const AIRTABLE_CONFIG = {
		apiKeyAirtable: '{{ env.AIRTABLE_API_KEY }}',
		baseId: '{{ env.AIRTABLE_BASE_ID }}',
		table: '{{ env.AIRTABLE_TABLE_ID }}'
	};

const modal = document.querySelector('[data-modal]')
const closeButton = document.querySelector('.close-button');
const modalMessage = document.getElementById('modal-message');

function openModal(type) {
	const message = modal.querySelector(`[data-msg=${type}]`);
	modalMessage.replaceChildren(message.content.cloneNode(true));
  	modal.showModal();
}

closeButton.addEventListener('click', () => {
    modal.close()
});

	async function handleFormSubmit(event) {
		event.preventDefault();
		
		const form = event.target;
		const contactEmail = form.elements['contactEmail'].value;
		const submitButton = form.querySelector('button[type="submit"]');
		const originalButtonText = submitButton.textContent;
		
		if (!contactEmail || !contactEmail.includes('@')) {
			openModal('error');
			return;
		}

		submitButton.disabled = true;
		submitButton.textContent = '...';

	try {
		const data = {
			records: [{
				fields: {
					"Mail": contactEmail,
				}
			}]
		};

  const response = await fetch(`https://api.airtable.com/v0/${AIRTABLE_CONFIG.baseId}/${AIRTABLE_CONFIG.table}`, {
				method: 'POST',
				headers: {
					'Authorization': `Bearer ${AIRTABLE_CONFIG.apiKeyAirtable}`,
					'Content-Type': 'application/json'
				},
				body: JSON.stringify(data)
			});

			if (!response.ok) {
				const errorText = await response.text();
				throw new Error(`Airtable API error: ${response.status} - ${errorText}`);
			}

			form.reset();
			openModal('success');
			
		} catch (error) {
			console.error('Error:', error);
			openModal('error');
		} finally {
			submitButton.disabled = false;
			submitButton.textContent = originalButtonText;
		}
	}

	document.addEventListener('DOMContentLoaded', function() {
		const mailForm = document.getElementById('mail-form');
		
		if (mailForm) {
			mailForm.addEventListener('submit', handleFormSubmit);
		}
	});

</script>
</body>
</html>